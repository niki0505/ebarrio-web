import { useState } from "react";
import api from "../api";
import { useConfirm } from "../context/ConfirmContext";

//STYLES
import "../App.css";

//ICONS
import { IoClose } from "react-icons/io5";

function ResidentReject({ onClose, resID }) {
  const confirm = useConfirm();
  const [remarks, setRemarks] = useState("");
  const [showModal, setShowModal] = useState(true);
  const [errors, setErrors] = useState([]);

  const handleSubmit = async () => {
    const isConfirmed = await confirm(
      "Are you sure you want to reject this resident profile?",
      "confirm"
    );
    if (!isConfirmed) {
      return;
    }
    
    // Validate input before submitting
    if (!validateRemarks(remarks)) {
      return;
    }

    try {
      await api.post(`/rejectresident/${resID}`, { remarks });
      alert("Residency application rejected");
      onClose();
    } catch (error) {
      console.log("Error rejecting resident profile");
    }
  };

  const validateRemarks = (remarks) => {
    let errors = [];
    // Check length constraints
    if (remarks.length < 10 || remarks.length > 200) {
      errors.push("Remarks must be between 10 and 200 characters.");
    }

    // Check allowed characters
    const regex = /^[a-zA-Z0-9,.\s]*$/;
    if (!regex.test(remarks)) {
      errors.push("Use only letters, numbers, commas, and periods.");
    }

    setErrors(errors);
    return errors.length === 0;
  };

  const handleClose = () => {
    setShowModal(false);
    onClose();
  };

  return (
    <>
      {showModal && (
        <div className="modal-container">
          <div className="modal-content w-[30rem] h-[22rem]">
            <div className="dialog-title-bar">
              <div className="flex flex-col w-full">
                <div className="dialog-title-bar-items">
                  <h1 className="modal-title">Reject Resident</h1>
                  <IoClose
                    onClick={handleClose}
                    className="dialog-title-bar-icon"
                  ></IoClose>
                </div>
                <hr className="dialog-line" />
              </div>
            </div>

            <div className="modal-form-container">
              <div className="modal-form">
                <textarea
                  placeholder="Enter your reason here..."
                  value={remarks}
                  onChange={(e) => setRemarks(e.target.value)}
                  rows={5}
                  minLength={10}
                  maxLength={255}
                  className="h-[11rem] textarea-container"
                ></textarea>
                <div className="textarea-length-text">{remarks.length}/255</div>

                {/* Display error messages */}
                {errors.length > 0 && (
                  <div className="text-red-500 text-sm mt-2">
                    {errors.map((error, index) => (
                      <p key={index}>{error}</p>
                    ))}
                  </div>
                )}

                <div className="flex justify-center">
                  <button
                    onClick={handleSubmit}
                    type="submit"
                    className="actions-btn bg-btn-color-blue hover:bg-[#0A7A9D]"
                  >
                    Submit
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default ResidentReject;


=======================ERRORS IN CREATE CONTACT AND EDIT CONTACT=================

import { useState } from "react";
import api from "../api";
import { useConfirm } from "../context/ConfirmContext";

//STYLES
import "../App.css";

//ICONS
import { IoClose } from "react-icons/io5";

function CreateContact({ onClose }) {
  const confirm = useConfirm();
  const [name, setName] = useState("");
  const [contactNumber, setContactNumber] = useState("+63");
  const [showModal, setShowModal] = useState(true);
  const [mobileNumError, setMobileNumError] = useState("");
  const [nameError, setNameError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    let hasErrors = false;

    // Validate name length
    if (name.length < 3 || name.length > 50) {
      setNameError("Name must be between 3 and 50 characters.");
      hasErrors = true;
    }

    // Validate contact number format and length
    if (contactNumber.length < 13 || contactNumber.length > 14) {
      setMobileNumError("Number must be a minimum of 9 digits and maximum of 10 digits.");
      hasErrors = true;
    }

    if (hasErrors) {
      return;
    }

    try {
      const isConfirmed = await confirm(
        "Are you sure you want to create a new contact?",
        "confirm"
      );
      if (!isConfirmed) {
        return;
      }
      if (loading) return;

      setLoading(true);
      let formattedNumber = contactNumber;
      formattedNumber = "0" + contactNumber.slice(3);
      await api.post("/createemergencyhotlines", {
        name,
        contactNumber: formattedNumber,
      });
      alert("Emergency contact successfully created!");
      onClose();
    } catch (error) {
      const response = error.response;
      if (response && response.data) {
        console.log("❌ Error status:", response.status);
        alert(response.data.message || "Something went wrong.");
      } else {
        console.log("❌ Network or unknown error:", error.message);
        alert("An unexpected error occurred.");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setShowModal(false);
    onClose();
  };

  const smartCapitalize = (word) => {
    if (word === word.toUpperCase()) return word;
    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
  };

  const lettersAndSpaceOnly = (e) => {
    const { name, value } = e.target;
    const filtered = value.replace(/[^a-zA-Z\s.'-]/g, "");

    const capitalized = filtered
      .split(" ")
      .map((word) => smartCapitalize(word))
      .join(" ");

    setName(capitalized);
  };

  const mobileInputChange = (e) => {
    let { name, value } = e.target;
    value = value.replace(/\D/g, "");

    if (!value.startsWith("+63")) {
      value = "+63" + value.replace(/^0+/, "").slice(2);
    }
    if (value.length > 13) {
      value = value.slice(0, 13);
    }
    if (value.length >= 4 && value[3] === "0") {
      return;
    }

    setContactNumber(value);

    // Reset mobile number error if valid
    if (value.length >= 13) {
      setMobileNumError(null);
    } else {
      setMobileNumError("Number must be a minimum of 9 digits and maximum of 10 digits.");
    }
  };

  return (
    <>
      {showModal && (
        <div className="modal-container">
          <div className="modal-content h-[16rem] w-[30rem]">
            <div className="dialog-title-bar">
              <div className="flex flex-col w-full">
                <div className="dialog-title-bar-items">
                  <h1 className="modal-title">Add New Contact</h1>
                  <IoClose
                    onClick={handleClose}
                    className="dialog-title-bar-icon"
                  ></IoClose>
                </div>
                <hr className="dialog-line" />
              </div>
            </div>

            <form
              className="modal-form-container"
              onSubmit={(e) => {
                e.preventDefault();
                handleSubmit();
              }}
            >
              <div className="modal-form">
                <div className="employee-form-group">
                  <label for="name" className="form-label">
                    Name<label className="text-red-600">*</label>
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={name}
                    onChange={lettersAndSpaceOnly}
                    className="form-input h-[30px]"
                    required
                  />
                  {nameError && <div className="text-red-500 text-sm">{nameError}</div>}
                </div>
                <div className="employee-form-group">
                  <label className="form-label">
                    Contact Number<label className="text-red-600">*</label>
                  </label>
                  <input
                    type="text"
                    id="contactnumber"
                    name="contactnumber"
                    value={contactNumber}
                    onChange={(e) => mobileInputChange(e)}
                    className="form-input h-[30px]"
                    required
                  />
                  {mobileNumError && <div className="text-red-500 text-sm">{mobileNumError}</div>}
                </div>
                <div className="flex justify-center">
                  <button
                    type="submit"
                    disabled={loading}
                    className="actions-btn bg-btn-color-blue hover:bg-[#0A7A9D]"
                  >
                    {loading ? "Submitting..." : "Submit"}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

export default CreateContact;
